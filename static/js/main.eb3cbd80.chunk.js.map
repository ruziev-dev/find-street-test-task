{"version":3,"sources":["ServerAPI.js","components/ReadOnlyRow.js","components/StreetFindField.js","components/StreetList.js","components/FindSteetApp.js","App.js","index.js"],"names":["commonOptions","mode","headers","ServerAPI","getMyIP","a","fetch","response","json","data","ip","getMyCity","userIP","method","location","city","getStreets","query","body","JSON","stringify","count","suggestions","ReadOnlyRow","useState","helperText","SetErrorHelperText","isErrorShowed","SetIsErrorShowed","showErrorMessage","hideErrorMessage","Grid","container","spacing","item","xs","style","paddingTop","TextField","onClick","onBlur","error","id","label","defaultValue","InputProps","readOnly","fullWidth","variant","re","RegExp","StreetFindField","searchStreet","value","setValue","isValidateError","SetIsValidateError","onChange","e","target","test","placeholder","margin","autoFocus","onKeyPress","event","key","InputLabelProps","shrink","useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","StreetList","streetsArray","classes","className","List","map","el","street_with_type","ListItem","button","ListItemText","primary","region","fias_id","FindSteetApp","setStreetsArray","street","request","console","log","Container","fixed","justify","App","isDataGetted","setIsDataGetted","setUserIP","userCity","setUserCity","useEffect","IpAdress","initialization","AppBar","position","Toolbar","Typography","LinearProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb3cbd80.chunk.js","sourcesContent":["const CITY_URL = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/iplocate/address?ip=\"\r\nconst STREET_URL = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address\"\r\nconst token = \"35c1b92f08dcd22fce83bc90ae710f7b6fcdf6af\";\r\n\r\nconst commonOptions = {\r\n    mode: \"cors\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Token \" + token\r\n    }\r\n}\r\n\r\nexport const ServerAPI = {\r\n    getMyIP: async () => {\r\n        let response = await fetch('https://ipapi.co/json/')\r\n        let data = await response.json()\r\n        return data.ip\r\n           \r\n    },\r\n    getMyCity: async (userIP) => {\r\n        let response = await fetch(CITY_URL + userIP, {\r\n            method: \"GET\",\r\n           ...commonOptions\r\n        })\r\n        let data = await response.json()\r\n        return data.location.data.city\r\n    },\r\n    getStreets: async (query) => {\r\n        let response = await fetch(STREET_URL, {\r\n            method: \"POST\",\r\n           ...commonOptions,\r\n           body: JSON.stringify({query, count: 5})\r\n        })\r\n        let data = await response.json()\r\n        return data.suggestions\r\n    }\r\n\r\n\r\n}","import { Grid, TextField } from '@material-ui/core'\r\nimport React, {useState} from 'react';\r\n\r\n\r\nexport const ReadOnlyRow = ({ ip, city }) => {\r\n\r\n    const [helperText, SetErrorHelperText] = useState(null)\r\n    const [isErrorShowed, SetIsErrorShowed] = useState(false)\r\n\r\n    const showErrorMessage = () => {\r\n        SetIsErrorShowed(true)\r\n        SetErrorHelperText('Вы не можете изменять эти поля')\r\n    }\r\n\r\n    const hideErrorMessage = () => {\r\n        SetIsErrorShowed(false)\r\n        SetErrorHelperText(null)\r\n    }\r\n    return (\r\n            <Grid container spacing={3}>\r\n                <Grid item xs style={{ paddingTop: '30px' }}>\r\n\r\n                    <TextField\r\n                        onClick={showErrorMessage}\r\n                        onBlur={hideErrorMessage}\r\n                        error={isErrorShowed}\r\n                        helperText={helperText}\r\n                        id=\"outlined-read-only-input\"\r\n                        label=\"Ваш IP адрес\"\r\n                        defaultValue={ip}\r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}\r\n                        fullWidth\r\n                        variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs style={{ paddingTop: '30px' }}>\r\n                    <TextField\r\n                        onClick={showErrorMessage}\r\n                        onBlur={hideErrorMessage}\r\n                        error={isErrorShowed}\r\n                        helperText={helperText}\r\n                        id=\"outlined-read-only-input\"\r\n                        label=\"Ваш город\"\r\n                        defaultValue={city}\r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}\r\n                        fullWidth\r\n                        variant=\"filled\" />\r\n\r\n                </Grid>\r\n            </Grid>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Grid, TextField } from '@material-ui/core/';\r\n\r\nconst re = new RegExp('^[a-zA-ZА-Яа-я]*$')\r\n\r\nexport const StreetFindField = ({ searchStreet }) => {\r\n    const [value, setValue] = useState('')\r\n    const [isValidateError, SetIsValidateError] = useState(false)\r\n    const [helperText, SetErrorHelperText] = useState(null)\r\n\r\n    const submitStreet = () => {\r\n        if (value === '') {\r\n            SetIsValidateError(true)\r\n            SetErrorHelperText('Поле не может быть пустым')\r\n        } else {\r\n            SetIsValidateError(false)\r\n            SetErrorHelperText(null)\r\n            searchStreet(value)\r\n            setValue('')\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeFunction = (e) => {\r\n        let value = e.target.value\r\n        setValue(value)\r\n        if (!re.test(value)) {\r\n            SetIsValidateError(true)\r\n            SetErrorHelperText('В поле могут быть только буквы')\r\n        } else {\r\n            SetIsValidateError(false)\r\n            SetErrorHelperText(null)\r\n        }\r\n    }\r\n    return (\r\n        <Grid item xs>\r\n            <TextField onChange={onChangeFunction}\r\n                id=\"outlined-full-width\"\r\n                value={value}\r\n                label=\"Начните вводить адрес и нажмите Enter\"\r\n                placeholder=\"например Ленина\"\r\n                helperText={helperText}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                autoFocus\r\n                onKeyPress={(event) => {\r\n                    if (event.key === 'Enter') {\r\n                        submitStreet()\r\n                    }\r\n                }}\r\n                error={isValidateError}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport { List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport const StreetList = ({ streetsArray }) => {\r\n    const classes = useStyles();\r\n\r\n    if (streetsArray) {\r\n        return (\r\n            <div className={classes.root}>\r\n                <List>\r\n                    {streetsArray.map(el => {\r\n                        let city = el.data.street_with_type ? el.data.street_with_type : ''\r\n                        return (\r\n                            <ListItem button key={el.data.fias_id}>\r\n                                <ListItemText primary={`${el.data.region} ${city}`} />\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                    }\r\n                </List>\r\n            </div>\r\n        )\r\n    } else return null\r\n}","import React, { useState } from 'react'\r\nimport { ReadOnlyRow } from './ReadOnlyRow'\r\nimport { StreetFindField } from './StreetFindField'\r\nimport { StreetList } from './StreetList'\r\n\r\nimport { Container } from '@material-ui/core';\r\nimport { ServerAPI } from './../ServerAPI';\r\n\r\nexport const FindSteetApp = ({ ip, city }) => {\r\n\r\n    const [streetsArray, setStreetsArray] = useState(null)\r\n\r\n\r\n    const searchStreet = async (street) => {\r\n        let request = `${city} ${street}`\r\n        let data = await ServerAPI.getStreets(request)\r\n        console.log(data)\r\n        setStreetsArray(data)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container fixed justify=\"center\">\r\n                <ReadOnlyRow ip={ip} city={city} />\r\n                <StreetFindField searchStreet={searchStreet} />\r\n                <StreetList streetsArray={streetsArray} />\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n","\nimport React, { useEffect, useState } from 'react';\nimport { ServerAPI } from './ServerAPI'\n\nimport { FindSteetApp } from './components/FindSteetApp'\n\nimport { LinearProgress, AppBar, Toolbar, Typography } from '@material-ui/core'\n\n\nconst App = () => {\n  const [isDataGetted, setIsDataGetted] = useState(false)\n  const [userIP, setUserIP] = useState(null)\n  const [userCity, setUserCity] = useState(null)\n\n  useEffect(() => {\n    const initialization = async () => {\n      const IpAdress = await ServerAPI.getMyIP()\n      setUserIP(IpAdress)\n      const city = await ServerAPI.getMyCity(IpAdress)\n      console.log(city);\n      setUserCity(city)\n      setIsDataGetted(true)\n    }\n\n    initialization()\n  }, [])\n\n\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            Поиск улиц твоего города\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {\n        isDataGetted\n          ? <FindSteetApp ip={userIP} city={userCity} />\n          : <LinearProgress />\n      }\n    </>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}